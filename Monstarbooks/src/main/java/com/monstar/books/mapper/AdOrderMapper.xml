<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.monstar.books.adorder.dao.AdOrderDao">

	<!--주문목록 가져오기 -->
	<select id="getOrderList"
		resultType="com.monstar.books.adorder.dto.AdOrderDto">
		SELECT
		mm.mid AS memberId,
		mm.mname AS memberName,
		mo.orderno AS orderNo,
		mod.oregdate AS orderdate,
		b.btitle AS productName,
		mod.ocount AS
		productCount,
		mo.ototalprice AS totalAmount,
		mo.ostatus AS orderStatus
		FROM m_order mo
		JOIN m_order_detail mod ON mo.orderno = mod.orderno
		JOIN m_book b ON mod.bookno = b.bookno
		JOIN m_member mm ON mo.memberno
		= mm.memberno
		ORDER BY mo.orderno DESC
		<!-- 주문 번호를 기준으로 내림차순 정렬 -->
	</select>

	<!-- 주문상태변경 -->
	<update id="adupdateOrderStatus" parameterType="map">
		UPDATE m_order
		SET ostatus = #{newStatus}
		WHERE orderno = #{orderNo}
	</update>


	<!-- 도서명으로 검색 -->
	<select id="getOrderListProductName"
		resultType="com.monstar.books.adorder.dto.AdOrderDto">
		SELECT
		mm.mid AS memberId,
		mm.mname AS memberName,
		mo.orderno AS orderNo,
		mod.oregdate AS orderdate,
		b.btitle AS productName,
		(
		SELECT SUM(ocount)
		FROM m_order_detail
		WHERE orderno = mo.orderno
		) AS ProductCount,
		mo.ototalprice AS totalAmount,
		mo.ostatus AS orderStatus
		FROM m_order mo
		JOIN m_order_detail mod ON mo.orderno = mod.orderno
		JOIN m_book b ON
		mod.bookno = b.bookno
		JOIN m_member mm ON mo.memberno = mm.memberno
		WHERE BTITLE LIKE '%'|| #{param3} || '%'
		ORDER BY mo.orderno DESC
		<!-- 주문 번호를 기준으로 내림차순 정렬 -->
	</select>

	<!-- 회원 id으로 검색 -->
	<select id="getOrderListMemberId"
		resultType="com.monstar.books.adorder.dto.AdOrderDto">
		SELECT
		mm.mid AS memberId,
		mm.mname AS memberName,
		mo.orderno AS orderNo,
		mod.oregdate AS orderdate,
		b.btitle AS productName,
		(
		SELECT SUM(ocount)
		FROM m_order_detail
		WHERE orderno = mo.orderno
		) AS ProductCount,
		mo.ototalprice AS totalAmount,
		mo.ostatus AS orderStatus
		FROM m_order mo
		JOIN m_order_detail mod ON mo.orderno = mod.orderno
		JOIN m_book b ON
		mod.bookno = b.bookno
		JOIN m_member mm ON mo.memberno = mm.memberno
		WHERE MID LIKE '%'|| #{param3} || '%'
		ORDER BY mo.orderno DESC
		<!-- 주문 번호를 기준으로 내림차순 정렬 -->
	</select>

	<!-- 배송상태 검색 -->
	<select id="getDeliveryStatus"
		resultType="com.monstar.books.adorder.dto.AdOrderDto">
		SELECT
		mm.mid AS memberId,
		mm.mname AS memberName,
		mo.orderno AS orderNo,
		mod.oregdate AS orderdate,
		b.btitle AS productName,
		mod.ocount AS productCount,
		mo.ototalprice AS totalAmount,
		mo.ostatus AS orderStatus
		FROM m_order mo
		JOIN m_order_detail mod ON mo.orderno = mod.orderno
		JOIN m_book b ON mod.bookno = b.bookno
		JOIN m_member mm ON mo.memberno = mm.memberno
		WHERE mo.ostatus  LIKE '%'|| #{param4} || '%'
		ORDER BY mo.orderno DESC
	</select>
	

	<!-- 페이징 -->
	<select id="selectBoardTotCount1" resultType="Integer">
		SELECT COUNT(*)
		FROM M_BOOK WHERE BTITLE LIKE '%'|| #{param1} || '%'
	</select>

	<select id="selectBoardTotCount2" resultType="Integer">
		SELECT COUNT(*)
		FROM M_MEMBER WHERE MID LIKE '%'|| #{param1} || '%'
	</select>

	<select id="selectBoardTotCount4" resultType="Integer">
		SELECT COUNT(*)
		FROM M_ORDER
	</select>



	<!-- 주문목록 상세페이지 -->

	<!--배열로 주문정보 가져와서 여러권의 책표시 가능하게 책번호와 책이름도 select -->

	<!-- 주문번호가 1번인 상품이 몇개인가 카운트 하여 BOOKCOUNT로 받아 BOOKCOUNT가 1이상일시 ~~책 외 1권으로 
		표시가능하게 SQL 문작성 -->
	<select id="getorderDetail"
		resultType="com.monstar.books.adorder.dto.AdOrderDto">
		SELECT
		OD.ORDERNO AS orderNo,
		OD.OREGDATE AS orderDate,
		D.DADDRESS2 AS daddress2,
		D.DNAME AS dname,
		B.BTITLE AS productName,
		OD.OCOUNT AS productCount,
		B.BOOKNO AS bookNo,
		(
		SELECT COUNT(*)
		FROM
		M_ORDER_DETAIL MOD
		WHERE MOD.ORDERNO = OD.ORDERNO
		) AS bookCount
		FROM
		M_ORDER_DETAIL OD
		JOIN M_DELIVERY D ON OD.ORDERNO = D.ORDERNO
		JOIN
		M_BOOK B ON OD.BOOKNO = B.BOOKNO
		WHERE OD.ORDERNO = #{param1}
	</select>




	<!--주문번호, 총상품의 가격 sum(판매가 * 수량) , 결제금액, 결제방법, 쿠폰이름 쿠폰의 유효성에 따라 할인 금액을 선택 
		쿠폰이 유효하지 않으면 할인 금액 0 , 총삼품 가격에서 할인 금액 차감하여 최종결제 금액 계산 -->

	<select id="getpaymentDetail"
		resultType="com.monstar.books.adorder.dto.AdOrderDto">
		SELECT
		o.orderno,
		SUM(od.opricesell * od.ocount) AS
		totalAmount,
		o.ototalprice,
		o.opay AS paymentMethod,
		c.cpname AS couponName,
		CASE
		WHEN c.cpvalid >= SYSDATE THEN c.cpprice
		ELSE 0
		END AS
		applied_coupon_price,
		(SUM(od.opricesell * od.ocount) - CASE WHEN
		c.cpvalid >= SYSDATE THEN c.cpprice ELSE 0
		END) AS finalpay
		FROM
		m_order
		o
		LEFT JOIN m_coupon c ON o.cpno = c.cpno
		JOIN m_order_detail od ON
		o.orderno = od.orderno
		WHERE
		o.orderno = #{param1}
		GROUP BY
		o.orderno,
		o.ototalprice, o.opay, c.cpname, c.cpvalid, c.cpprice
	</select>


	<!-- 상품 결제 정보 가져오기 주문 상세(M_ORDER_DETAIL) 정보를 기준으로 도서 정보(M_BOOK)와 도서 상세 정보(M_BOOK_DETAIL)를 
		LEFT JOIN하여 가져오기 -->
	<select id="getproductDetail"
		resultType="com.monstar.books.adorder.dto.AdOrderDto">
		SELECT
		OD.BOOKNO AS orderNo,
		B.BTITLE AS productName,
		BD.BIMG AS productImage,
		B.BPRICESELL AS productPrice,
		OD.OCOUNT AS productCount,
		BC.BCATEGORY1 AS category1,
		BC.BCATEGORY2 AS category2,
		MO.OSTATUS AS orderStatus
		FROM M_ORDER_DETAIL OD
		LEFT JOIN M_BOOK B ON OD.BOOKNO = B.BOOKNO
		LEFT JOIN M_BOOK_DETAIL BD ON B.BOOKNO = BD.BOOKNO
		LEFT JOIN M_BOOK_CATEGORY BC ON BD.BCATEGORYNO = BC.BCATEGORYNO
		JOIN M_ORDER MO ON OD.ORDERNO = MO.ORDERNO
		WHERE OD.ORDERNO = #{param1}
	</select>


</mapper>